namespace leetcode.HashTable.SlidingWindow;
/// <summary>
/// https://leetcode.com/problems/longest-substring-without-repeating-characters/
/// </summary>
public class _3
{
    public int LengthOfLongestSubstring(string s)
    {
        Dictionary<char, int> chars = [];
        int max = 0;
        int left = 0;
        for (int right = 0; right < s.Length; right++)
        {
            char c = s[right];
            chars[c] = chars.GetValueOrDefault(c, 0) + 1;
            /*
             вот эта хуета работает почему?
            потому что например у нас была строка abc уже набрана в chars [{a:1},{b:1},{c:1}]
            и сейчас мы перешли на следующий символ из строки abccaabbb - c, добавили в chars['c'] +1, там стало 2: {c:2}
            и мы видим что условие chars['c']>1 выполняется
            поэтому, очевидно, на окне 0..4 у нас условие уникальности не выполняется. 
            Попробуем уменьшать окно до тех пор пока у нас не начнёт оно выполняться:
            хватаем символ который в строке находится на месте куда указывает индекс left
            и уменьшаем количество в общей мапе на 1:
            было
            [{a:1},{b:1},{c:2}]
            стало 
            [{a:0},{b:1},{c:2}]

            На следующей итерации будет [{a:0},{b:0},{c:2}] 
            но нас это нихуя не колышет ибо у нас всё ещё повторяется c, так что двигаемся дальше и ставим left туда где стоит right
            и удаляем уже c: [{a:0},{b:0},{c:1}] 
            Всё, теперь у нас нет количеств больше 1 и можно двигаться к следующему символу: a.
            его мы добавим в мапу снова, потом перейдём к следующей а, снова обнаружим что стало 2 и опять будем
            сдвигать окно слева пока не будет 1 а.
             */
            while (chars[c] > 1)
            {
                chars[s[left]] -= 1;
                left++;
            }
            /*
             А тут на каждой итерации мы смотрим насколько далеко левый и правый индекс и обновляем максиум
            +1 потому что массивы идут с нуля. 
            То есть если у нас chars = [{a:1},{b:1},{c:1}] 
            to left будет 0, right = 2, но количество-то три, поэтому +1
             */
            max = Math.Max(max, right - left + 1);
        }

        return max;
    }
}
