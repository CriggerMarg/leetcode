namespace leetcode.TwoPointers;
public class _42
{
	public int Trap(int[] height)
	{
		// тут тема в том что можно представить бассейн как, ну, бассейн.
		// Скажем, ищем слева границу выше нуля и справа границу выше нуля - это наши базовые границы
		// Потом смотрим, какая сторона ниже - левая или правая. Это нужно чтобы вычислять глубину: 
		// идти надо всегда со стороны которая ниже, ведь с её стороны вода будет выливаться если мы 
		// нальём больше чем надо.
		// дальше смотрим, что на следующей клетке от выбранной стороны: если там ниже границы, то сохраняем разницу между двумя высотами
		// в противном случае просто обновляем высоту и снова сравниваем лево и право

		int left = 0; int right = height.Length - 1; // это указатели на текущие колонки
		int ans = 0;  // тут будем накапливать воду
		int leftMax = 0; int rightMax = 0; // те самые высоты, которые мы апдейтим в процессе обхода
		while (left < right)
		{
			if (height[left] < height[right])
			{
				leftMax = Math.Max(leftMax, height[left]);
				ans += leftMax - height[left];
				left++;
			}
			else
			{
				rightMax = Math.Max(rightMax, height[right]);
				ans += rightMax - height[right];
				right--;
			}
		}
		return ans;
	}
}
